# -*- coding: utf-8 -*-
"""SpamClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tEY1TQlldWFtqpyVfbLs6wg_FcAd-rZb
"""

df = pd.read_csv("sample_data/spam.csv",encoding='latin-1')

import pandas as pd
import nltk

df.head(5)

df.shape

df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'],inplace=True)

df.rename(columns={'v1':'class','v2':'sms'},inplace=True)
df.sample(5)

df.groupby('class').describe()

df = df.drop_duplicates(keep='first')

df.groupby('class').describe

"""Data Visualization"""

df["Length"] = df['sms'].apply(len)

df.head(2)

df.hist(column='Length',by='class',bins=50)

"""Step 2 - Preprocessing"""

from nltk.stem.porter import PorterStemmer

nltk.download('stopwords')
from nltk.corpus import stopwords

nltk.download('punkt')
ps = PorterStemmer()

df.head(5)

import string

def clean_text(text):
    text = text.lower()
    text = nltk.word_tokenize(text)

    y = []
    for i in text:
        if i.isalnum():
            y.append(i)

    text = y[:]
    y.clear()

    for i in text:
        if i not in stopwords.words('english') and i not in string.punctuation:
            y.append(i)

    text = y[:]
    y.clear()

    for i in text:
        y.append(ps.stem(i))

    return " ".join(y) if y else "" # Return empty string if y is empty

df['sms_cleaned'] = df['sms'].apply(clean_text)

df.head(5)

nltk.download('punkt_tab')

"""Step 3 - Feature Extraction"""

from sklearn.feature_extraction.text import TfidfVectorizer

tf_vec = TfidfVectorizer(max_features=3000)
x = tf_vec.fit_transform(df['sms_cleaned']).toarray()

none_cleaned_sms = df[df['sms_cleaned'].isnull()]
display(none_cleaned_sms)

x.shape

Y = df['class'].values

"""Step 4 - Learning"""

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(x,Y,test_size=0.2,random_state=2)

from sklearn.naive_bayes import MultinomialNB

model = MultinomialNB()
model.fit(X_train,Y_train)

from sklearn.metrics import accuracy_score
Y_pred = model.predict(X_test)
accuracy_score(Y_test,Y_pred)